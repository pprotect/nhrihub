script#file_selector_template(type='text/ractive' src='../../../../../app/views/shared/_file_selector_template.html')

h1 {{i18n.heading}}

.row.well.well-sm.complaint.editable_container('as-inpage_edit'='id')
  .col-md-12('data-toggle' = 'edit')
    .fade.edit
      span.required_before 
        | {{ t.required }}
  .col-md-10.col-md-offset-1
    .row
      .col-md-9
        .row('data-toggle' = 'edit')
          .col-md-4
            label
              | {{ t.date_received }}
          .col-md-8.date_received
            .no_edit.in
              | {{formatted_date}}
            .edit
              input#date_received(type = 'text', as-single_month_datepicker=true, value = "{{formatted_date}}", style = "position:relative; z-index:12")
      .col-md-3.actions
        .row(style = "margin-left:0px;")
          .col-md-1.col-md-offset-2('data-toggle'= 'edit')
            .no_edit.in
              .alarm_icon.counter('data-count'="{{reminders_count}}", 'on-click' = "@this.show_reminders_panel()", 'data-toggle' = 'tooltip', title = '{{ t.reminders }}')
            .edit
          .col-md-1('data-toggle'= 'edit')
            .no_edit.in
              .note_icon.show_notes.counter('data-count'='{{notes_count}}', 'on-click' = "@this.show_notes_panel()", 'data-toggle' = 'tooltip', title = '{{ t.notes }}')
            .edit
          .col-md-1('data-toggle'= 'edit')
            .no_edit.in
              i.fa.fa-comments-o.fa-lg.counter('data-count'='{{communications_count}}', 'on-click' = '@this.show_communications_panel()', style = "position:relative;", 'data-toggle' = 'tooltip', title = '{{ t.communications }}')
            .fade.edit
          .col-md-1.icon('data-toggle' = 'edit')
            .fade.edit
            .fade.no_edit.in
              i.fa.fa-pencil-square-o#edit_start(style = "position:relative; top:1px;", 'data-toggle' = 'tooltip', title = '{{ t.edit }}')
          .col-md-1('data-toggle'= 'edit')
            .no_edit.in
              i.fa.fa-sm.fa-trash-o.delete_icon('on-click'='@this.show_confirm_delete_modal()', 'data-toggle' = 'tooltip', title = '{{ t.delete }}')
            .edit
          .col-md-1('data-toggle'= 'edit')
            .no_edit.in
              i.fa.fa-sm.fa-file-word-o.word_document('on-click'='@this.generate_word_doc()', 'data-toggle' = 'tooltip', title = '{{ t.download }}')
            .edit
    .row
      .col-md-3
        label
          | {{ t.current_assignee }}
      .col-md-9
        span.current_assignee
          | {{ current_assignee_name }}
    .row('data-toggle'= 'edit')
      .col-md-3
        label
          | {{ t.status }}
      .col-md-9
        .fade.no_edit.in#status_changes
          | {{#status_changes}}
          <statusChange status_humanized='{{status_humanized}}' date='{{date}}' user_name='{{user_name}}' />
          | {{/status_changes}}
        .fade.edit#current_status
          form
            label(style='font-weight:normal; margin-right:12px')
              | {{ t.evaluation }}
              input#under_evaluation(type = 'radio', name ='{{current_status_humanized}}', value ='Under Evaluation', style='margin-left:6px')
            label(style='font-weight:normal; margin-right:12px')
              | {{ t.open }}
              input#open(type = 'radio', name ='{{current_status_humanized}}', value ='Open', style='margin-left:6px')
            label(style='font-weight:normal; margin-right:12px')
              | {{ t.suspended }}
              input#suspended(type = 'radio', name ='{{current_status_humanized}}', value ='Suspended', style='margin-left:6px')
            label(style='font-weight:normal')
              | {{ t.closed }}
              input#closed(type = 'radio', name ='{{current_status_humanized}}', value ='Closed', style='margin-left:6px')
    .row
      .col-md-3('data-toggle' = 'edit')
        .no_edit.in
          label
            | {{ t.complainant }}
        .edit
          label
            | {{ t.complainant }}
      .col-md-9.complainant('data-toggle'='edit')
        .no_edit.in
          span.title
            | {{ title }}
          span.firstName
            | {{ firstName }}
          span.lastName
            | {{ lastName }}
        .edit
          .row
            .col-md-4.form-group
              label(for = 'title')
                | {{ t.title }}
              input.form-control#title(value = '{{title}}')
            .col-md-4.form-group('class-has-error' = 'firstName_error')
              label.required(for = 'firstName')
                | {{ t.first_name }}
              input.form-control#firstName(value = '{{firstName}}', 'on-keydown'="@this.remove_attribute_error('firstName')")
              span.help-block.error#firstName_error
                | {{ t.firstName_error_message }}
            .col-md-4.form-group('class-has-error' = 'lastName_error')
              label.required(for = 'lastName')
                | {{ t.lastName }}
              input.form-control#lastName(value = '{{lastName}}', 'on-keydown'="@this.remove_attribute_error('lastName')")
              span.help-block.error#lastName_error
                | {{ t.lastName_error_message }}
    .row
      .col-md-12.form-group("class-has-error" = "dob_error", "data-toggle" = "edit")
        .row.no_edit.in
          .col-md-3
            label
              | {{ t.dob }}
          .col-md-3
            span.complainant_dob {{ date_of_birth }}
          .col-md-2('style' = "text-align:right")
            label
              | {{ t.gender }}
          .col-md-4
            span.gender {{gender}}
        .row.edit
          .col-md-3
            label.required
              | {{ t.dob }}
            span dd/mm/yyyy
          .col-md-2
            input#dob.form-control("on-keydown" = "@this.remove_attribute_error('dob')", style = "width:112px", value = "{{dob}}")/
            span#dob_error.help-block.error {{ t.dob_error_message }}
          .col-md-2(style = "text-align:right")
            label
              | {{ t.gender }}
          .col-md-5
            form
              label(style = "font-weight:normal")
                span(style = "margin-right:6px")
                  | {{ t.male }}
                input#m(name = "{{gender}}", type = "radio", value = "M")/
              label(style = "font-weight:normal")
                span(style = "margin-right:6px; margin-left:12px")
                  | {{ t.female }}
                input#f(name = "{{gender}}", type = "radio", value = "F")/
              label(style = "font-weight:normal")
                span(style = "margin-right:6px; margin-left:12px")
                  | {{ t.other }}
                input#o(name = "{{gender}}", type = "radio", value = "O")/
    .row
      .col-md-12.form-group("data-toggle" = "edit")
        .row
          .col-md-3
            label
              | {{ t.email }}
          .col-md-9
            .no_edit.in
              span.email {{ email }}
            .edit
              input#email.form-control(value = "{{email}}")/
    .row
      .col-md-12.form-group("class-has-error" = "village_error", "data-toggle" = "edit")
        .row
          .col-md-3
            .no_edit.in
              label
                | {{ t.village }}
            .edit
              label.required
                | {{ t.village }}
          .col-md-9
            .no_edit.in
              span.complainant_village
                | {{ village }}
            .edit
              input#village.form-control("on-keydown" = "@this.remove_attribute_error('village')", value = "{{village}}")/
              span#village_error.help-block.error
                | {{ t.village_error_message }}
    .row
      .col-md-12("data-toggle" = "edit")
        .row
          .col-md-3
            label
              | {{ t.phone }}
          .col-md-9
            .no_edit.in
              span.complainant_phone {{ phone }}
            .edit
              input#phone.form-control(value = "{{phone}}")/
    .row
      .col-md-12.form-group("class-has-error" = "details_error", "data-toggle" = "edit")
        .row
          .col-md-3
            .no_edit.in
              label
                | {{ t.details }}
            .edit
              label.required
                | {{ t.details }}
          .col-md-9
            .no_edit.in
              span.complaint_details {{ details }}
            .edit
              input#complaint_details.form-control("on-keydown" = "@this.remove_attribute_error('details')", value = "{{details}}")/
              span#details_error.help-block.error
                | {{ t.details_error_message }}
    .row
      .col-md-12("data-toggle" = "edit")
        .row
          .col-md-4
            label
              | {{ t.desired_outcome }}
          .col-md-8
            .no_edit.in
              span.desired_outcome
                | {{ desired_outcome }}
            .edit
              input#desired_outcome.form-control(value = "{{desired_outcome}}")/
    .row
      .col-md-12("data-toggle" = "edit")
        .row
          .col-md-3
            label
              | {{ t.complained_to_subject_agency }}
          .col-md-3
            .no_edit.in
              span.complained_to_subject_agency {{#if complained_to_subject_agency }} yes {{else}} no {{/if}}
            .edit
              form
                label(style = "font-weight:normal; margin-right:12px")
                  | {{ t.yes }}
                  input#complained_to_subject_agency_yes(name = "{{complained_to_subject_agency}}", style = "margin-left:6px", type = "radio", value = "true")/
                label(style = "font-weight:normal")
                  | {{ t.no }}
                  input#complained_to_subject_agency_no(name = "{{complained_to_subject_agency}}", style = "margin-left:6px", type = "radio", value = "false")/
    .row
      .col-md-3
        label {{ t.assignees_history }}
      .col-md-5("data-toggle" = "edit")
        <assignees assigns = "{{assigns}}"  />
        .no_edit.in
        .edit
          <assigneeSelector editing = "true" new_assignee_id = "{{new_assignee_id}}" />
    .row
      .col-md-12.form-group("class-has-error" = "complaint_area_id_error", "data-toggle" = "edit")
        .row
          .col-md-3
            .no_edit.in
              label
                | {{ t.area }}
            .edit.required
              label
                | {{ t.area }}
          .col-md-9
            #complaint_area.no_edit.in {{ complaint_area_name }}
            .edit
              .row
                <areasSelector complaint_area_id = "{{complaint_area_id}}" />
              span#complaint_area_id_error.help-block.error
                | {{ t.complaint_area_id_error_message }}
    .row
      .col-md-12.form-group("class-has-error" = "subarea_id_count_error", "data-toggle" = "edit")
        .row
          .col-md-3
            .no_edit.in
              label
                | {{ t.subareas }}
            .edit.required
              label
                | {{ t.subareas }}
          .col-md-9
            .no_edit.in
              | {{#area_subarea_ids:id}}
              <area area_ids = "{{area_ids}}" area_subarea_ids = "{{area_subarea_ids}}" areas = "{{all_complaint_areas}}" id = "{{parseInt(id)}}" subarea_ids = "{{this}}" subareas = "{{all_subareas}}" />
              | {{/area_subarea_ids}}
            .edit
              .row
                <subareaSelector all_complaint_areas = "{{all_complaint_areas}}" subarea_ids = "{{subarea_ids}}" />
            span#subarea_id_count_error.help-block.error
              | {{ t.complaint_basis_error_message }}
    .row("data-toggle" = "edit")
      .col-md-3
        label
          | {{ t.agency }}
      .col-md-9
        #agencies.no_edit.in.comma-list(style = "display:flex")
          <agencies agency_ids = "{{agency_ids}}" />
        .edit
          <agenciesSelector agency_ids = "{{agency_ids}}" all_agencies_in_sixes = "{{all_agencies_in_sixes}}" />
    .row("data-toggle" = "edit")
      .col-md-2
        label
          | {{ t.documents }}
      #complaint_documents.col-md-10
        .edit(style = "padding-left:15px; padding-top:15px")
          | {{> file_selector_template {key : 'complaint'} }}
        .no_edit.in
        <attachedDocuments attached_documents = "{{attached_documents}}" key = "complaint" maximum_filesize = "{{maximum_filesize}}" permitted_filetypes = "{{permitted_filetypes}}" />
    .row("data-toggle" = "edit", style = "margin-top:30px")
      .col-sm-3.col-sm-offset-3.edit(style = "text-align:center")
        #edit_cancel.btn.btn-danger.btn-sm.edit_cancel
          i.fa.fa-remove.fa-lg(style = "color:white")
          span(style = "color:white")
            | {{ t.cancel }}
      .col-sm-3.edit(style = "text-align:center")
        #edit_save.btn.btn-success.btn-sm.save_complaint(style = "color:white")
          i.fa.fa-check.fa-lg(style = "color:white")
          span
            | {{ t.save }}
        .form-group("class-has-error" = "has_errors")
          span#complaint_error.help-block.error
            | {{ t.form_error }}

style.
  .complainant .firstName, .complainant .title {margin-right: .25em;}

script(type='text/javascript').
  import Mandates from 'mandates'
  import AreasSelector from 'complaint/areas_selector'
  import Area from 'area'
  import Agencies from 'agencies'
  import AgenciesSelector from 'agencies_selector'
  import Assignees from 'assignees'
  import AssigneeSelector from 'assignee_selector'
  import ComplaintDocuments from 'complaint/complaint_documents'
  import ConfirmDeleteModal from 'confirm_delete_modal'
  import Validator from 'validator'
  import 'jquery-ui/ui/widgets/datepicker'
  var EditInPlace = require("exports-loader?EditInPlace!edit_in_place")
  import translations from 'translations.js'
  import Communications from 'communications.ractive.pug'
  import '../../../../../app/assets/javascripts/local_node_modules/bootstrap-multimodal/js/multimodal.js'
  import StatusChange from 'status_change.ractive.pug'
  var RactiveLocalMethods = require("exports-loader?local_methods!ractive_local_methods")
  import reminders from 'reminders.ractive.pug'
  import notes from 'notes.ractive.pug'
  import Remindable from 'remindable.coffee'
  import Notable from 'notable.coffee'
  import SubareaSelector from 'complaint/subarea_selector.ractive.pug'
  import 'bootstrap'
  window.$ = window.jQuery = $ // it's the only method I could get to work for making $ available globally!
  window._ = _

  const EditBackup = {
    stash() {
      const stashed_attributes = _(this.get()).pick(this.get('persistent_attributes'));
      Object.assign(stashed_attributes, {attached_documents : this.get('attached_documents')});
      return this.stashed_instance = $.extend(true,{},stashed_attributes);
    },
    restore() {
      return this.set(this.stashed_instance);
    }
  };


  const Persistence = {
    delete_callback(data,textStatus,jqxhr){
      return this.parent.remove(this._guid);
    },
    save_complaint() {
      if (this.validate()) {
        const data = this.formData();
        return $.ajax({
          // thanks to http://stackoverflow.com/a/22987941/451893
          //xhr: @progress_bar_create.bind(@)
          method : 'post',
          data,
          url : Routes.complaints_path(current_locale),
          success : this.save_complaint_callback,
          context : this,
          processData : false,
          contentType : false
        });
      }
    },
    // jQuery correctly sets the contentType and boundary values
    formData() {
      return this.asFormData(this.get('persistent_attributes'));
    },
    // in ractive_local_methods, returns a FormData instance
    save_complaint_callback(response, status, jqxhr){
      UserInput.reset();
      this.set(response);
    },
    progress_bar_create() {
      return this.findComponent('progressBar').start();
    },
    update_persist(success, error, context) { // called by EditInPlace
      if (this.validate()) {
        const data = this.formData();
        return $.ajax({
          // thanks to http://stackoverflow.com/a/22987941/451893
          //xhr: @progress_bar_create.bind(@)
          method : 'put',
          data,
          url : this.get('persisted') ? Routes.complaint_path(current_locale, this.get('id')) : undefined,
          success,
          context,
          processData : false,
          contentType : false
        });
      }
    }
    // jQuery correctly sets the contentType and boundary values
  }

  export default Ractive.extend({
    el: '#complaint',
    template : $TEMPLATE,
    css: $CSS,
    computed : {
      delete_confirmation_message() {
        return `${i18n.delete_complaint_confirmation_message} ${this.get('case_reference')}?`;
      },
      reminders_count() {
        const reminders = this.get('reminders');
        if (_.isUndefined(reminders)) { return 0; } else { return reminders.length; }
      },
      notes_count() {
        const notes = this.get('notes');
        if (_.isUndefined(notes)) { return 0; } else { return notes.length; }
      },
      communications_count() {
        const comms = this.get('communications');
        if (_.isUndefined(comms)) { return 0; } else { return comms.length; }
      },
      persisted() {
        return !(_.isNull(this.get('id')) || _.isUndefined(this.get('id')));
      },
      persistent_attributes() {
        return ['village','phone','complaint_area_id',
          'current_status_humanized', 'new_assignee_id', 'subarea_ids',
          'agency_ids', 'attached_documents_attributes', 'details',
          'dob', 'email', 'complained_to_subject_agency', 'desired_outcome', 'gender', 'date',
          'firstName', 'lastName', 'title'];
      },
      url() {
        if (this.get('persisted')) { return Routes.complaint_path(current_locale, this.get('id')); }
      },
      formatted_date : {
        get() {
          const date_received = this.get('date'); // it's a formatted version of date_received
          if (_.isEmpty(date_received)) {
            return "";
          } else {
            return this.get('date');
          }
        },
        set(val){
          return this.set('date', val);
        }
      },
      has_errors() {
        return this.validator.has_errors();
      },
      complaint_area_name() {
        if(_.isNull(this.get('complaint_area_id'))){return null}
        const complaint_area = _(this.get('all_complaint_areas')).find(complaint_area=>complaint_area.id==this.get('complaint_area_id'))
        return complaint_area.name;
      },
      create_reminder_url() {
        if (this.get('persisted')) { return Routes.complaint_reminders_path('en', this.get('id')); }
      },
      create_note_url() {
        if (this.get('persisted')) { return Routes.complaint_notes_path('en', this.get('id')); }
      },
      subarea_id_count() { // aka subareas
        const sa = this.get('subarea_ids');
        const sal = _.isUndefined(sa) ? 0 : sa.length;
        return sal;
      },
      validation_criteria() {
        return {
          firstName : ['notBlank'],
          lastName : ['notBlank'],
          village : ['notBlank'],
          complaint_area_id : 'numeric',
          subarea_id_count : 'nonZero',
          new_assignee_id : ['nonZero', {if : () => !this.get('editing')}],
          dob: () => {
            const date_regex = new RegExp(/(\d{1,2})\/(\d{1,2})\/(\d{4})/); // dd/mm/yyyy
            const match = date_regex.exec(this.get('dob'));
            const valid_day = match && (parseInt(match[1]) <= 31);
            const valid_month = match && (parseInt(match[2]) <= 12);
            const valid_year = match && (parseInt(match[3]) <= (new Date).getFullYear()) && (parseInt(match[3]) >= 1900 );
            return !_.isNull(match) && valid_day && valid_month && valid_year;
          },
          details : 'notBlank'
        };
      },
      error_vector() {
        return {
          firstName_error : this.get('firstName_error'),
          lastName_error : this.get('lastName_error'),
          village_error : this.get('village_error'),
          new_assignee_id_error : this.get('new_assignee_id_error'),
          complaint_area_id_error : this.get('complaint_area_id_error'),
          subarea_id_count_error : this.get('subarea_id_count_error'),
          dob_error : this.get('dob_error'),
          details_error : this.get('details_error')
        };
      }
    },
    oninit() {
      return this.set({
        editing : false,
        serialization_key:'complaint',
        new_assignee_id: 0
      });
    },
    onconfig() {
      return this.validator = new Validator(this);
    },
    // this should work, but due to some weirdness in ractive, it doesn't, maybe a future release
    // will work better so that the callbacks can be removed from the view elements
    //onupdate: (obj)->
      //attr = _(obj).keys()[0]
      //console.log "change to #{attr}"
      //unless _.isUndefined(@validator)
        //if _(@validator.attributes).includes(attr)
          //@validate_attribute(attr)
    data : function(){ return {
      t : translations.t('complaint')
    }},
    components : {
      mandates : Mandates,
      areasSelector : AreasSelector,
      agencies : Agencies,
      agenciesSelector : AgenciesSelector,
      area : Area,
      assignees : Assignees,
      assigneeSelector : AssigneeSelector,
      attachedDocuments : ComplaintDocuments,
      statusChange : StatusChange,
      subareaSelector: SubareaSelector,
      //progressBar : ProgressBar
    },
    generate_word_doc() {
      return window.location = Routes.complaint_path('en',this.get('id'),{format : 'docx'});
    },
    validate() {
      return this.validator.validate();
    },
    validate_attribute(attribute){
      return this.validator.validate_attribute(attribute);
    },
    remove_attribute_error(attribute){
      return this.set(attribute+"_error",false);
    },
    remove_errors() {
      return this.restore();
    },
    cancel_add_complaint() {
      UserInput.reset();
      return this.parent.shift('complaints');
    },
    remove(guid){
      // required for Ractive 0.8.0, possibly can be removed in later revs
      const guids = _(this.findAllComponents('attachedDocument')).pluck('_guid');
      const index = _(guids).indexOf(guid);
      return this.splice('attached_documents',index,1);
    },
    add_file(file){
      const attached_document = {
        id : null,
        complaint_id : this.get('id'),
        file,
        title: '',
        file_id : '',
        url : '',
        original_filename : file.name,
        filesize : file.size,
        original_type : file.type,
        serialization_key : 'complaint[complaint_documents_attributes][]'
      };
      return this.unshift('attached_documents', attached_document);
    }}).extend(EditBackup)
  .extend(Persistence)
  .extend(ConfirmDeleteModal)
  .extend(Remindable)
  .extend(Notable)
  .extend(Communications)
  .extend(RactiveLocalMethods);
