<dupeList complainantMatch = '{{complainantMatch}}' agencyMatch = '{{agencyMatch}}' />
.row.editable_container('as-inpage_edit'='id')
  .row
    .col-md-8
      h1 {{heading}}
    .col-md-4.actions
      | {{>actions }}

  .row.well.well-sm
    input(type='hidden', name='type', value='{{type}}')
    .col-md-12('data-toggle' = 'edit')
      .fade.edit
        span.required_before {{ t.required }}

    .col-md-10.col-md-offset-1

      .row('class-hidden'='new_complaint')
        .col-md-2.complaint_label  {{ t.complaint_type }}
        .col-md-6#complaint_type {{ complaint_type }}

      | {{>date_received }}

      | {{>duplicates }}

      .row('class-hidden'='new_complaint')
        .col-md-2
          label {{ t.current_assignee }}
        .col-md-10
          span#current_assignee {{ current_assignee_name }}

      .row
        .col-md-2
          label {{ t.organization_name }}
        .col-md-3('data-toggle' = 'edit')
          .edit
            input.form-control.dupe_check#organization_name(autocomplete='none', name='organization_name', value='{{organization_name}}')
          .no_edit.in
            span#organization_name {{ organization_name }}
        .col-md-4
          label {{ t.organization_registration_number }}
        .col-md-3('data-toggle' = 'edit')
          .edit
            input.form-control.dupe_check#organization_registration_number(autocomplete='none', name='organization_registration_number', value='{{organization_registration_number}}')
          .no_edit.in
            span#organization_registration_number {{ organization_registration_number }}

      .row
        .col-md-2
          label {{ context.complainant }}
        .col-md-9#complainant('data-toggle'='edit')
          .no_edit.in
            span#title {{ title }}
            span#contact_first_name {{ firstName }}
            span#contact_last_name {{ lastName }}
          .edit
            .row
              .col-md-4.form-group
                label(for = 'title') {{ t.title }}
                input.form-control#title(autocomplete='none', value = '{{title}}')
              .col-md-4.form-group('class-has-error' = 'firstName_error')
                label.required(for = 'firstName') {{ t.first_name }}
                input.form-control#contact_first_name(autocomplete='none', value = '{{firstName}}', 'on-keydown'="@this.remove_attribute_error('firstName')")
                span.help-block.error#firstName_error {{ t.firstName_error_message }}
              .col-md-4.form-group('class-has-error' = 'lastName_error')
                label.required(for = 'lastName')
                  | {{ t.lastName }}
                input.form-control#contact_last_name(autocomplete='none', value = '{{lastName}}', 'on-keydown'="@this.remove_attribute_error('lastName')")
                span.help-block.error#lastName_error
                  | {{ t.lastName_error_message }}

      | {{>address }}

      | {{>contact_info }}

      | {{>preferred_means }}

      | {{>details }}

      | {{>desired_outcome }}

      | {{>complained_to_agency }}

      | {{>areas }}

      | {{>subareas }}

      | {{>agencies }}

      | {{>legislations }}

      | {{>lifecycle }}

      | {{>documents }}

      <buttons mode='{{mode}}' editing='{{editing}}' has_errors='{{has_errors}}' invalid_query='{{invalid_query}}' />

style
  include:scss complaint_styles.scss

script(type='text/javascript').
  window.$ = window.jQuery = $ // it's the only method I could get to work for making $ available globally!
  window._ = _
  import ComplaintBase from 'complaint_base'
  import translations from 'translations.js'

  export default ComplaintBase.extend({
    el: '#complaint',
    template : $TEMPLATE,
    css: $CSS,
    data : function(){
      return {
        context : translations.t('organization'),
      }
    },
    computed : {
      dupe_check_attributes() {
        return [ 'type', 'organization_name', 'organization_registration_number', 'agency_ids'];
      },
      persistent_attributes() {
        return ['id_type','id_value','alt_id_type','alt_id_value', 'alt_id_other_type',
          'city','province_id','postal_code','complaint_area_id', 'new_transferee_id',
          'physical_address', 'postal_address','home_phone','cell_phone','fax','preferred_means',
          'organization_name', 'organization_registration_number', 'legislation_ids',
          'status_changes_attributes', 'new_assignee_id', 'subarea_ids',
          'agency_ids', 'attached_documents_attributes', 'details', 'new_jurisdiction_branch_id',
          'dob', 'email', 'complained_to_subject_agency', 'desired_outcome', 'gender', 'date',
          'firstName', 'lastName', 'title', 'type'];
      },
      validation_criteria() {
        return {
          firstName : ['notBlank'],
          lastName : ['notBlank'],
          city : ['notBlank'],
          postal_code : ['notBlank'],
          province_id : 'nonZero',
          complaint_area_id : 'numeric',
          subarea_id_count : 'nonZero',
          //new_assignee_id: ['nonZero', {if : () => {return (this.get('new_complaint') && this.get('editing'))}}],
          date_received: () => {
            return this.findAllComponents('datepicker')[0].validate()
          },
          details : ['notBlank'],
          preferred_means : 'notBlank',
          postal_address: ['notBlank', {if: ()=>this.get('preferred_means') == 'mail'}],
          email: ['notBlank', {if: ()=>this.get('preferred_means') == 'email'}],
          home_phone: ['notBlank', {if: ()=>this.get('preferred_means') == 'home_phone'}],
          cell_phone: ['notBlank', {if: ()=>this.get('preferred_means') == 'cell_phone'}],
          fax: ['notBlank', {if: ()=>this.get('preferred_means') == 'fax'}],
          status_memo: ()=>{return this.findComponent('closedStatusRadio').validate() },
          agency_ids: ()=>{return _.isArray(this.get('agency_ids')) && !_.isEmpty(this.get('agency_ids')) && _(this.get('agency_ids')).every(function(i){return _.isNumber(i)})},
        };
      }
    },
    })
