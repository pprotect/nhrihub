<dupeList complainantMatch = '{{complainantMatch}}' agencyMatch = '{{agencyMatch}}' />
.row.editable_container('as-inpage_edit'='id')
  .row
    .col-md-8
      h1 {{heading}}
    .col-md-4.actions
      | {{>actions }}

  .row.well.well-sm
    input(type='hidden', name='type', value='{{type}}')
    .col-md-12('data-toggle' = 'edit')
      .fade.edit
        span.required_before {{ t.required }}

    .col-md-10.col-md-offset-1

      .row('class-hidden'='new_complaint')
        .col-md-2.complaint_label  {{ t.complaint_type }}
        .col-md-6#complaint_type {{ complaint_type }}

      | {{>date_received }}

      | {{>duplicates }}

      | {{>linked_complaints }}

      <complainants type='{{type}}' complainants='{{complainants}}' />

      | {{>details }}

      | {{>desired_outcome }}

      | {{>complained_to_agency }}

      | {{>areas }}

      | {{>subareas }}

      | {{>agencies }}

      | {{>legislations }}

      | {{>lifecycle }}

      | {{>documents }}

      <buttons mode='{{mode}}' editing='{{editing}}' has_errors='{{has_errors}}' invalid_query='{{invalid_query}}' />

style
  include:scss complaint_styles.scss

script(type='text/javascript').
  window.$ = window.jQuery = $ // it's the only method I could get to work for making $ available globally!
  window._ = _
  import ComplaintBase from 'complaint_base'
  import translations from 'translations.js'

  export default ComplaintBase.extend({
    el: '#complaint',
    template : $TEMPLATE,
    css: $CSS,
    data : function(){
      return {
        context : translations.t('own_motion'),
      }
    },
    computed : {
      initiating_branch(){
        if(_.isNull(this.get('initiating_branch_id'))){ return null }
        var branch = _(this.get('branches')).findWhere({id:  this.get('initiating_branch_id')});
        return branch.name;
      },
      initiating_office(){
        if(_.isNull(this.get('initiating_office_id'))){ return null }
        var provincial_office = _(this.get('provincial_offices')).findWhere({id: this.get('initiating_office_id')});
        var regional_office = _(this.get('regional_offices')).findWhere({id: this.get('initiating_office_id')});
        if(typeof provincial_office != 'undefined'){
          return provincial_office.name + " (Provincial office)"
        }else if( typeof regional_office != 'undefined'){
          return regional_office.name + " (Regional office)"
        }else{ throw "office not found"}
      },
      dupe_check_attributes() {
        return ['type', 'complainant[initiating_branch_id]', 'complainant[initiating_office_id]', 'agency_ids'];
      },
      persistent_attributes() {
        return ['complaint_area_id', 'new_transferee_id',
          'status_changes_attributes', 'new_assignee_id', 'subarea_ids', 'legislation_ids',
          'agency_ids', 'attached_documents_attributes', 'details', 'new_jurisdiction_branch_id',
          'complained_to_subject_agency', 'desired_outcome', 'date',
          'type', 'duplicates', 'linked_complaints', 'complainants_attributes'];
      },
      validation_criteria() {
        return {
          fake_attribute: ()=> {
            // setting the complainants_attributes_error is delegated to the complainants component
            // here we just trigger the validation to occur. The result is managed by the component.
            this.findAllComponents('complainant').forEach(complainant=>complainant.validate())
            return true
          },
          complaint_area_id : 'numeric',
          subarea_id_count : 'nonZero',
          //new_assignee_id: ['nonZero', {if : () => {return (this.get('new_complaint') && this.get('editing'))}}],
          date_received: () => {
            return this.findAllComponents('datepicker')[0].validate()
          },
          details : ['notBlank'],
          status_memo: ()=>{console.log('validate status memo'); return this.findComponent('closedStatusRadio').validate() },
          agency_ids: ()=>{return _.isArray(this.get('agency_ids')) && !_.isEmpty(this.get('agency_ids')) && _(this.get('agency_ids')).every(function(i){return _.isNumber(i)})},
          dupe_refs_format: ()=>{
            if(_.isEmpty(this.get('dupe_refs'))){
                return true
              }else{
                let re = new RegExp(this.get('case_ref_regex'))
                let matches = this.get('dupe_refs').split(',').map(ref=> ref.match(re)==null)
                return matches.every(match => !match)
              }
          },
          dupe_refs_not_found: ()=>{
            //it's necessary to have this attr here, even though it's validated remotely/asynchronously
            //b/c the presence of this key links the dupe_refs_not_found_error to has_errors
            return true
          },
          link_refs_format: ()=>{
            if(_.isEmpty(this.get('link_refs'))){
                return true
              }else{
                let re = new RegExp(this.get('case_ref_regex'))
                let matches = this.get('link_refs').split(',').map(ref=> ref.match(re)==null)
                return matches.every(match => !match)
              }
          },
          link_refs_not_found: ()=>{
            //it's necessary to have this attr here, even though it's validated remotely/asynchronously
            //b/c the presence of this key links the link_refs_not_found_error to has_errors
            return true
          },
        };
      }
    },
  })
