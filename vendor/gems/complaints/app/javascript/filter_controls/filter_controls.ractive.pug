.row.filter_control_box#complaints_controls
  .row
    .col-md-12
      h4 
        | {{ t.search }}
  .row.labels
    .col-md-2(class-active="@this.is_active('complainant')") {{ t.complainant }}
    .col-md-2(class-active="@this.is_active('city')") {{ t.city }}
    .col-md-2(class-active="@this.is_active('phone')") {{ t.phone }}
    .col-md-2(class-active="@this.is_active('case_reference')") {{ t.case_reference }}
  .row(style = "margin-bottom:12px;")
    .col-md-2
      input.form-control#complainant(name='complainant', value="{{filter_criteria.complainant}}", placeholder ='{{ t.enter_complainant }}')
    .col-md-2
      input.form-control#city(name='city', value="{{filter_criteria.city}}", placeholder ='{{ t.enter_city }}')
    .col-md-2
      input.form-control#phone(name='phone', value="{{filter_criteria.phone}}", placeholder ='{{ t.phone }}')
    .col-md-2
      input.form-control#case_reference( name='case_reference', value="{{filter_criteria.case_reference}}", placeholder ='{{ t.case_reference }}')
    .col-md-1(style = 'text-align:center')
      i.erase.fa.fa-refresh('on-click'='@this.clear_filter()', 'data-toggle'='tooltip', 'title' ='{{ t.clear }}')
  .row.labels
    .col-md-2(class-active="@this.is_active('status')") {{ t.status }}
    .col-md-2(class-active="@this.is_active('from')") {{ t.date_from }}
    .col-md-2(class-active="@this.is_active('to')") {{ t.date_to }}
    .col-md-2(class-active="@this.is_active('agency')") {{ t.agency }}
  .row(style = "margin-bottom:12px;")
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle#status_select(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_status }}
          span.caret
        ul.dropdown-menu
          | {{#statuses}}
          <statusFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{name}}' />
          | {{/statuses}}
    .col-md-2
      input.form-control#from(type="text", name="from", placeholder ='{{ t.date_from }}', autocomplete='off', value = "{{filter_criteria.from}}", style = 'position:relative; z-index:12;')
    .col-md-2
      input.form-control#to(type="text", name="to", placeholder ='{{ t.date_to }}', autocomplete='off', value = "{{filter_criteria.to}}", style = 'position:relative; z-index:12;')
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_agency }}
          span.caret
        ul.dropdown-menu#agency_filter_select
          <selectClear t='{{t}}' collection='{{'selected_agency_id'}}'/>
          | {{#all_agencies}}
          <agencyFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{name}}' />
          | {{/all_agencies}}
  .row.labels
    .col-md-2(class-active="@this.is_active('area')")
      | {{ t.area }}
    .col-md-2(class-active="@this.is_active('complaint_basis')")
      | {{ t.complaint_basis }}
    .col-md-2(class-active="@this.is_active('assignee')")
      | {{ t.assignee }}
  .row(style = "margin-bottom:12px;")
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_area }}
          span.caret
        ul.dropdown-menu#area_filter_select
          | {{#areas}}
          <areaFilterSelect id='{{id}}' name='{{name}}' filter_criteria='{{filter_criteria}}' />
          | {{/areas}}
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left {{ t.select_basis }}
          span.caret
        ul.dropdown-menu
          <selectClear t='{{t}}' collection='{{['selected_subarea_ids']}}'/>
          | {{#areas}}
          li.dropdown-header
            | {{ name }}
          | {{#subareas}}
          <subareaFilterSelect name='{{name}}' id='{{id}}' filter_criteria='{{filter_criteria}}' />
          | {{/subareas}}
          | {{/areas}}
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle#assignee_select(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_assignee }}
          span.caret
        ul.dropdown-menu#assignee_filter_select
          | {{#all_staff}}
          <assigneeFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{first_last_name}}'/>
          | {{/all_staff}}

style.
  .active:after { 
    content: "*";
    color: #f55310;
    font-size: 1.6em;
    line-height: 12px;
  }

script.
  import SubareaFilterSelect from 'subarea_filter_select'
  import AgencyFilterSelect from 'agency_filter_select'
  import AreaFilterSelect from 'area_filter_select'
  import AssigneeFilterSelect from 'assignee_filter_select'
  import StatusFilterSelect from 'status_filter_select'
  import translations from 'translations.js'
  import SelectClear from 'select_clear'

  export default Ractive.extend({
    template : $TEMPLATE,
    css: $CSS,
    components : {
      subareaFilterSelect: SubareaFilterSelect,
      agencyFilterSelect : AgencyFilterSelect,
      areaFilterSelect : AreaFilterSelect,
      assigneeFilterSelect : AssigneeFilterSelect,
      statusFilterSelect : StatusFilterSelect,
      selectClear : SelectClear,
    },
    data : function(){ return {
      t : translations.t('filter_controls'),
      default_subarea_ids :  _.map(complaints_page_data().all_subareas,function(d){return d.id }),
      //default_agency_ids :  _.map(complaints_page_data().all_agencies,function(d){return d.id})
      default_agency_id: "all"
    }},
    observe: {
      'filter_criteria': {
        handler(value, old, path, idx){
          if(!_.isUndefined(old)){
            this.parent.fetch();
          }
        }
      }
    },
    clear_filter() {
      //complaints_page_data().filter_criteria.case_reference = null
      this.set('filter_criteria',$.extend(true,{},complaints_page_data().default_filter_criteria));
      window.history.pushState({foo: "bar"},"unused title string",window.location.origin + window.location.pathname);
      //complaints.fetch();
      //return this.set_filter_from_query_string();
    },
    set_filter_from_query_string() {
      const search_string = (_.isEmpty( window.location.search) || _.isNull( window.location.search)) ? '' : window.location.search.split("=")[1];
      const filter_criteria = _.extend(source_filter_criteria,{case_reference : search_string});
      return this.set('filter_criteria',filter_criteria);
    },
    clear_all(name){
      var params = {};
      if(_.isArray(name)){
        name.forEach(function(n){
          params['filter_criteria.'+n] = ["0"];
        })
      }else{
        params['filter_criteria.'+name] = "0";
      }
      this.set(params);
    },
    select_all(name){
      var params = {};
      var that = this;
      if(_.isArray(name)){
        name.forEach(function(n){ 
          var defaults = that.get(n.replace(/selected/,'default'));
          params['filter_criteria.'+n] = defaults;
        })
      }else{
        var defaults = that.get(name.replace(/selected/,'default'));
        params['filter_criteria.'+name] = defaults;
      }
      this.set(params);
    },
    is_active(attr){
      if(attr == 'status'){
        return !_.isEmpty(this.get('filter_criteria.selected_status_ids'))
      }else if(attr == 'assignee'){
        return _.isNumber(this.get('filter_criteria.selected_assignee_id'))
      }else if(attr == 'case_reference'){
        return !_.isEmpty(this.get('filter_criteria.case_reference'))
      }else if(attr == 'complainant'){
        return !_.isEmpty(this.get('filter_criteria.complainant'))
      }else if(attr == 'city'){
        return !_.isEmpty(this.get('filter_criteria.city'))
      }else if(attr == 'phone'){
        return !_.isEmpty(this.get('filter_criteria.phone'))
      }else if(attr == 'from'){
        return !_.isEmpty(this.get('filter_criteria.from'))
      }else if(attr == 'to'){
        return !_.isEmpty(this.get('filter_criteria.to'))
      }else if(attr == 'agency'){
        return !_.isEmpty(this.get('filter_criteria.selecte_agency_ids'))
      }else if(attr == 'agency'){
        return !_.isEmpty(this.get('filter_criteria.basis_ids'))
      }else if(attr == 'agency'){
        return !_.isEmpty(this.get('filter_criteria.selected_subarea_ids'))
      }
    }
  });
