<dupeList complainantMatch = '{{complainantMatch}}' agencyMatch = '{{agencyMatch}}' />
.row.editable_container('as-inpage_edit'='id')
  .row
    .col-md-8
      h1 {{heading}}
    .col-md-4.actions
      | {{>actions }}

  .row.well.well-sm
    .col-md-12('data-toggle' = 'edit')
      .fade.edit
        span.required_before {{ t.required }}

    .col-md-10.col-md-offset-1

      .row('class-hidden'='new_complaint')
        .col-md-2.complaint_label  {{ t.complaint_type }}
        .col-md-6#complaint_type {{ complaint_type }}

      .row('data-toggle' = 'edit')
        .col-md-2
          label {{ t.date_received }}
        .col-md-8.date_received
          .no_edit.in#date {{formatted_date}}
          .edit
            input.form-control#date_received(autocomplete='off', type = 'text', value = "{{date}}", "as-single_month_datepicker"=true)

      .row('class-hidden'='new_complaint')
        .col-md-2
          label {{ t.current_assignee }}
        .col-md-10
          span#current_assignee {{ current_assignee_name }}

      .row
        .col-md-2('data-toggle' = 'edit')
          label {{ context.complainant }}
        .col-md-9#complainant('data-toggle'='edit')
          .no_edit.in
            span#title {{ title }}
            span#firstName {{ firstName }}
            span#lastName {{ lastName }}
          .edit
            .row
              .col-md-4.form-group
                label(for = 'title') {{ t.title }}
                input.form-control#title(autocomplete='none', value = '{{title}}')
              .col-md-4.form-group('class-has-error' = 'firstName_error')
                label.required(for = 'firstName') {{ t.first_name }}
                input.form-control#firstName(autocomplete='none', value = '{{firstName}}', 'on-keydown'="@this.remove_attribute_error('firstName')")
                span.help-block.error#firstName_error {{ t.firstName_error_message }}
              .col-md-4.form-group('class-has-error' = 'lastName_error')
                label.required(for = 'lastName') {{ t.lastName }}
                input.form-control.dupe_check#lastName(name='lastName', autocomplete='none', value = '{{lastName}}', 'on-keydown'="@this.remove_attribute_error('lastName')")
                span.help-block.error#lastName_error {{ t.lastName_error_message }}

      .row
        .col-md-12.form-group("class-has-error" = "dob_error", "data-toggle" = "edit", style='padding-top:0px; padding-bottom:0px;')
          .row.no_edit.in
            .col-md-2
              label {{ t.dob }}
            .col-md-3
              span#complainant_dob {{ date_of_birth }}
            .col-md-2('style' = "text-align:right")
              label {{ t.gender }}
            .col-md-4
              span#gender {{gender}}
          .row.edit
            .col-md-2
              label.required {{ t.dob }}
            .col-md-2
              input#dob.form-control(autocomplete='none', placeholder="dd/mm/yyyy", "on-keydown" = "@this.remove_attribute_error('dob')", style = "width:112px", value = "{{dob}}")/
              span#dob_error.help-block.error {{ t.dob_error_message }}
            .col-md-2(style = "text-align:right")
              label {{ t.gender }}
            .col-md-5
              form
                label(style = "font-weight:normal")
                  span(style = "margin-right:6px") {{ t.male }}
                  input#m(name = "{{gender}}", type = "radio", value = "M")
                label(style = "font-weight:normal")
                  span(style = "margin-right:6px; margin-left:12px") {{ t.female }}
                  input#f(name = "{{gender}}", type = "radio", value = "F")
                label(style = "font-weight:normal")
                  span(style = "margin-right:6px; margin-left:12px") {{ t.other }}
                  input#o(name = "{{gender}}", type = "radio", value = "O")

      .row.form-group( 'data-toggle' = 'edit')
        .col-md-2.complaint_label {{ t.principal_id }}
        .col-md-3.edit
          label
            | {{ t.passport }}
            input#identify_by_passport(type = 'radio', name = '{{id_type}}', value = 'Passport number')
          label
            | {{ t.id }}
            input#identify_by_id(type = 'radio', name = '{{id_type}}', value = 'State id')
        .col-md-3.edit
          input.form-control.dupe_check#id_value(autocomplete='none', type = 'text', name = 'id_value', value= "{{id_value}}")
        .col-md-3.no_edit.in#id_type {{ id_type }}
        .col-md-3.no_edit.in#id_value {{ id_value }}

      .row.form-group
        .col-md-2.complaint_label {{ t.alternate_id_type }}
        .col-md-4('data-toggle' = 'edit')
          .edit
            label
              | {{ t.pension }}
              input#identify_by_pension_id(type = 'radio', name = '{{alt_id_type}}', value = 'pension #')
            label
              | {{ t.prison }}
              input#identify_by_prison_id(type = 'radio', name = '{{alt_id_type}}', value = 'prison id')
            label
              | {{ t.other }}
              input#identify_by_other_id(type = 'radio', name = '{{alt_id_type}}', value = 'other')
          .no_edit.in#alt_id_name {{ alt_id_name }}
        .col-md-4#alt_id_other_type_field('class-visible' = 'other_id_selected' , 'data-toggle'='edit')
          .edit
            label {{ t.other_type }}
            input.form-control#alt_id_other_type(autocomplete='none', type='text', value='{{alt_id_other_type}}')

      .row.form-group( 'data-toggle'='edit')
        .col-md-2.complaint_label {{ t.alternate_id }}
        .col-md-5
          .edit
            input.form-control.dupe_check#alt_id_value(autocomplete='none', type = 'text', name = 'alt_id_value', value = "{{alt_id_value}}")
          .no_edit.in#alt_id_value {{ alt_id_value }}

      | {{>address }}

      | {{>contact_info }}

      | {{>preferred_means }}

      | {{>details }}

      | {{>desired_outcome }}

      | {{>complained_to_agency }}

      | {{>areas }}

      | {{>subareas }}

      | {{>agencies }}

      | {{>legislations }}

      | {{>lifecycle }}

      | {{>documents }}

      <buttons mode='{{mode}}' editing='{{editing}}' has_errors='{{has_errors}}' />

style.
  #alt_id_other_type_field label { width: 120px; }
  #alt_id_other_type_field .edit { display: flex;}
  #complainant #firstName, #complainant #title {margin-right: .25em;}
  #complainant .edit .col-md-4{
    padding-top:0px;
  }
  #complainant .edit .col-md-4:nth-of-type(2), #complainant .edit .col-md-4:nth-of-type(3){
    margin-top: -5px;
  }
  #alt_id_other_type_field.visible { display: block; }
  #alt_id_other_type_field:not(.visible) { display: none; }
  .complaint_label { font-weight: 700; }
  #identify_by_pension_id, #identify_by_prison_id, #identify_by_other_id {
    margin-left:12px;
    margin-right:12px;
  }
  #alt_id_other_type {
    margin-left: 12px;
  }
  #save_complaint .fa, #edit_save .fa, #edit_cancel .fa, #check_dupes .fa, .fileinput-button .fa, #proceed_to_intake .fa {
    color: white;
    margin-right: 6px;
    position: relative;
    top: -1px;
  }
  .fileinput-button {
    position: relative;
    top: -2px;
  }
  #date_received {
    width: inherit;
  }
  input#id_value {
    margin-top: -8px;
  }
  .form-control[disabled]{
    background-color: #e2dfdf;
  }
  #status_row {
    height: 48px;
  }

script(type='text/javascript').
  window.$ = window.jQuery = $ // it's the only method I could get to work for making $ available globally!
  window._ = _
  import ComplaintBase from 'complaint_base'
  import translations from 'translations.js'

  export default ComplaintBase.extend({
    template : $TEMPLATE,
    css: $CSS,
    data : function(){
      return {
        context : translations.t('individual'),
      }
    },
    computed : {
      dupe_check_attributes() {
        return ['type', 'id_value', 'alt_id_value', 'lastName', 'email', 'agency_id'];
      },
      persistent_attributes() {
        return ['id_type','id_value','alt_id_type','alt_id_value', 'alt_id_other_type',
          'city','province','postal_code','complaint_area_id', 'new_transferee_id',
          'physical_address', 'postal_address','home_phone','cell_phone','fax','preferred_means',
          'status_changes_attributes', 'new_assignee_id', 'subarea_ids', 'legislation_id',
          'agency_id', 'attached_documents_attributes', 'details', 'new_jurisdiction_branch_id',
          'dob', 'email', 'complained_to_subject_agency', 'desired_outcome', 'gender', 'date',
          'firstName', 'lastName', 'title', 'type'];
      },
      validation_criteria() {
        return {
          firstName : ['notBlank'],
          lastName : ['notBlank'],
          city : ['notBlank'],
          postal_code : ['notBlank'],
          province : ['notBlank'],
          complaint_area_id : 'numeric',
          subarea_id_count : 'nonZero',
          //new_assignee_id: ['nonZero', {if : () => {return (this.get('new_complaint') && this.get('editing'))}}],
          dob: () => {
            const date_regex = new RegExp(/(\d{1,2})\/(\d{1,2})\/(\d{4})/); // dd/mm/yyyy
            const match = date_regex.exec(this.get('dob'));
            const valid_day = match && (parseInt(match[1]) <= 31);
            const valid_month = match && (parseInt(match[2]) <= 12);
            const valid_year = match && (parseInt(match[3]) <= (new Date).getFullYear()) && (parseInt(match[3]) >= 1900 );
            return !_.isNull(match) && valid_day && valid_month && valid_year;
          },
          details : ['notBlank'],
          preferred_means : 'notBlank',
          postal_address: ['notBlank', {if: ()=>this.get('preferred_means') == 'mail'}],
          email: ['notBlank', {if: ()=>this.get('preferred_means') == 'email'}],
          home_phone: ['notBlank', {if: ()=>this.get('preferred_means') == 'home_phone'}],
          cell_phone: ['notBlank', {if: ()=>this.get('preferred_means') == 'cell_phone'}],
          fax: ['notBlank', {if: ()=>this.get('preferred_means') == 'fax'}],
          status_memo: ()=>{return this.findComponent('closedStatusRadio').validate() },
        };
      },
    },
    })
