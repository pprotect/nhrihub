div
  label
    | {{ name }}
    input(id='{{name.underscore()}}' type = 'radio', name ='{{status_id}}', value ='{{id}}')
  label('class-hidden'='!has_memo')
    | {{ memo }}
    input(id='{{this.name.underscore()}}_memo' type = 'checkbox', checked='{{memo_checked}}')

style.
  div {
    display: flex;
    flex-direction: column;
    }

script.
  import translations from 'translations.js'

  export default Ractive.extend({
    template: $TEMPLATE,
    css: $CSS,
    data(){
      return {
        t : translations.t('complaint'),
      }
    },
    oninit(){
      if(this.get('status_memo_type' == 'assessment') && this.get('memo') == 'Information pending')
        { this.set('memo_checked',true);
        }else{
          this.set('memo_checked',false);
        }
    },
    computed: {
      status_memo(){
        if(this.get('memo_checked')){return this.get('memo')}else{return ''}
      },
      memo(){
        var key = this.get('name').downcase();
        return this.get('t.'+key+'_memo');
      },
      selected(){
        return this.get('status_id') == this.get('id');
      },
      assessment_status(){
        return this.get('name') == 'Assessment';
      },
      has_memo(){
        return this.get('assessment_status') && this.get('selected');
      }
    },
    observe: {
      'selected status_memo': {
        handler(value, old, path, idx){
          // i.e. as opposed to is selected at initialization time
          var becomes_selected = (typeof old != 'undefined') && this.get('selected')
          if(becomes_selected){ 
            console.log('becomes selected '+this.get('name'))
            this.parent.set({complaint_status_id: this.get('id'), status_memo: this.get('status_memo')})
          };
        }
      }
    },
    })

