label
  | {{ name }}
  input(id='{{this.status.name.underscore()}}' type = 'radio', name ='{{status_id}}', value ='{{status.id}}')
  .btn-group.form-group('class-has-error' = 'status_memo_error')
    button.btn.btn-default.dropdown-toggle.form-control(type='button', 'data-toggle'='dropdown', 'class-hidden'='!selected')
      span#status_memo_prompt {{ button_text }}
      span.caret
    ul.dropdown-menu#status_memo(name="status_memo")
      | {{#status_memo_options}}
      li#preset('on-click'='select_preset(.)') {{ . }}
      | {{/status_memo_options}}
      li#referral
        div Referred to:
        input#referred(name='referred', tabIndex=-1, autocomplete='off', type='text', placeholder='Where referred', value='{{referred_to}}', 'on-keyup'='set_referred_to(referred_to)')
      li
        input#other(name='other', tabIndex=-1, autocomplete='off', type='text', placeholder='Other reason', value='{{other_reason}}', 'on-keyup'="set_other_reason(other_reason)")
    span.help-block.error#status_memo_error {{ t.status_memo_error_message }}

style.
  .btn-group.form-group {
    vertical-align: top;
    margin-left: 12px;
  }
  #status_memo_error{
    width: 125px;
  }
  #referral{
    display: flex;
  }
  #status_memo #preset{
    cursor: pointer;
  },
  #status_memo_prompt{
    color: gray;
  }
  .caret{
    margin-left: 12px;
  }
  #status_memo {
    width: 290px;
    top: 30px;
  }
  #status_memo #other{
    margin-left: 0px;
    width: 247px;
  }
  #status_memo li {
    margin-left: 18px;
    margin-top: 4px;
  }

script.
  import translations from 'translations.js'
  import Validator from 'validator'

  export default Ractive.extend({
    template: $TEMPLATE,
    css: $CSS,
    data(){
      return {
        t : translations.t('complaint'),
      }
    },
    onconfig() {
      return this.validator = new Validator(this);
    },
    computed: {
      validation_criteria() {
        return {
          status_memo: ()=>{
              if(!this.get('selected')){ return true };
              return this.get('valid_preset') || this.get('valid_referred_to') || this.get('valid_other_reason')
            },
        };
      },
      selected(){
        return this.get('status_id') == this.get('id');
      },
      //preset(){
        //var preset_type = this.get('status_memo_type') == 'close_preset';
        //if(preset_type){ return this.get('status_memo') };
      //},
      valid_preset(){
        var preset_type = this.get('status_memo_type') == 'close_preset'
        var non_blank_value = _.contains(this.get('status_memo_options'), this.get('status_memo'))
        return preset_type && non_blank_value
      },
      valid_referred_to(){
        var referred_type = this.get('status_memo_type') == 'close_referred_to'
        var non_blank_value = this.get('status_memo').length > 0
        return referred_type && non_blank_value
      },
      valid_other_reason(){
        var other_type = this.get('status_memo_type') == 'close_other_reason'
        var non_blank_value = this.get('status_memo').length > 0
        return other_type && non_blank_value
      },
      //status_memo(){
        //if(this.get('status_memo_type') == 'close_preset'){ return this.get('preset') }
        //if(this.get('status_memo_type') == 'close_referred_to'){ return "Referred to: "+this.get('referred_to') }
        //if(this.get('status_memo_type') == 'close_other_reason'){ return this.get('other_reason') }
      //},
      //referred_to: {
        //set(val){ if(!_.isEmpty(val)){ this.set('status_memo',"Referred to: "+val)}},
        //get(){
            //if(_.isEmpty(this.get('status_memo'))){ return "" }
            //var referred_match = this.get('status_memo').match(/^Referred to: (.*)$/);
            //if(referred_match){ return referred_match[1] }
          //}
      //},
      //other_reason: {
        //set(val){ if(!_.isEmpty(val)){ this.set('status_memo',val)}},
        //get(){
            //if(_.isEmpty(this.get('status_memo'))){ return "" }
            //var referred_match = this.get('status_memo').match(/^Referred to:/);
            //var preset_match = _.contains(this.get('status_memo_options'), this.get('status_memo'))
            //var assessment_match = this.get('status_memo').match(/Information pending/)
            //if(!referred_match && !preset_match && !assessment_match){ return this.get('status_memo') }
          //}
      //},
      button_text(){
        if(this.get('status_memo_type') == 'close_preset'){ return this.get('preset') }
        if(this.get('status_memo_type') == 'close_referred_to'){ return "Referred to: "+this.get('referred_to') }
        if(this.get('status_memo_type') == 'close_other_reason'){ return this.get('other_reason') }
        return this.get('t.status_memo_default_prompt')
      }
    },
    observe: {
      'selected': {
        handler(value, old, path, idx){
          this.set('status_memo_error',false);
          var becomes_selected = (typeof old != 'undefined') && this.get('selected')
          if(becomes_selected){
            this.parent.set({complaint_status_id: this.get('id'), status_memo: this.get('status_memo'), status_memo_type: this.get('status_memo_type')})
          };
        }
      },
      'preset': {
        handler(value, old, path, idx){
          this.set('status_memo_error',false);
          this.parent.set({complaint_status_id: this.get('id'), status_memo: this.get('status_memo'), status_memo_type: this.get('status_memo_type')})
        }
      },
      'referred_to': {
        handler(value, old, path, idx){
          this.set('status_memo_error',false);
          this.parent.set({complaint_status_id: this.get('id'), status_memo: "Referred to: "+this.get('referred_to'), status_memo_type: this.get('status_memo_type')})
        }
      },
      'other_reason': {
        handler(value, old, path, idx){
          this.set('status_memo_error',false);
          this.parent.set({complaint_status_id: this.get('id'), status_memo: this.get('other_reason'), status_memo_type: this.get('status_memo_type')})
        }
      }
    },
    oninit(){
        if(this.get('status_memo_type') == 'close_preset'){ this.set('preset', this.get('status_memo')) }
        else if(this.get('status_memo_type') == 'close_referred_to'){ this.set('referred_to', this.get('status_memo')) }
        else if(this.get('status_memo_type') == 'close_other_reason'){ this.set('other_reason', this.get('status_memo')) }
        //else {this.set('button_text', 't.status_memo_default_prompt')}
    },
    set_other_reason(val){
      this.set({preset:'', referred_to:'', status_memo: val, status_memo_type: 'close_other_reason'})
      this.set('status_memo_error',false);
    },
    select_preset(val){
      this.set({preset:val, referred_to:'', other_reason:'', status_memo:val, status_memo_type: 'close_preset'})
      this.set('status_memo_error',false);
    },
    set_referred_to(val){
      this.set({preset:'', other_reason:'', status_memo:val, status_memo_type: 'close_referred_to'})
      this.set('status_memo_error',false);
    },
    })
