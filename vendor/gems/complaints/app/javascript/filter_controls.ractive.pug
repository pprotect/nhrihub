.row.filter_control_box#complaints_controls
  .row
    .col-md-12
      h4 
        | {{ t.search }}
  .row.labels
    .col-md-2(class-active="@this.is_active('complainant')")
      | {{ t.complainant }}
    .col-md-2(class-active="@this.is_active('village')")
      | {{ t.village }}
    .col-md-2(class-active="@this.is_active('phone')")
      | {{ t.phone }}
    .col-md-2(class-active="@this.is_active('case_reference')")
      | {{ t.case_reference }}
  .row(style = "margin-bottom:12px;")
    .col-md-2
      input.form-control#complainant(name='complainant', value="{{filter_criteria.complainant}}", placeholder ='{{ t.enter_complainant }}')
    .col-md-2
      input.form-control#village(name='village', value="{{filter_criteria.village}}", placeholder ='{{ t.enter_village }}')
    .col-md-2
      input.form-control#phone(name='phone', value="{{filter_criteria.phone}}", placeholder ='{{ t.phone }}')
    .col-md-2
      input.form-control#case_reference( name='case_reference', value="{{filter_criteria.case_reference}}", placeholder ='{{ t.case_reference }}')
    .col-md-1(style = 'text-align:center')
      i.erase.fa.fa-refresh('on-click'='@this.clear_filter()', 'data-toggle'='tooltip', 'title' ='{{ t.clear }}')
  .row.labels
    .col-md-2(class-active="@this.is_active('status')")
      | {{ t.status }}
    .col-md-2(class-active="@this.is_active('from')")
      | {{ t.date_from }}
    .col-md-2(class-active="@this.is_active('to')")
      | {{ t.date_to }}
    .col-md-2(class-active="@this.is_active('agency')")
      | {{ t.agency }}
  .row(style = "margin-bottom:12px;")
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle#status_select(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_status }}
          span.caret
        ul.dropdown-menu
          | {{#statuses}}
          <statusFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{name}}' />
          | {{/statuses}}
    .col-md-2
      input.form-control#from(type="text", name="from", placeholder ='{{ t.date_from }}', autocomplete='off', value = "{{filter_criteria.from}}", style = 'position:relative; z-index:12;')
    .col-md-2
      input.form-control#to(type="text", name="to", placeholder ='{{ t.date_to }}', autocomplete='off', value = "{{filter_criteria.to}}", style = 'position:relative; z-index:12;')
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_agency }}
          span.caret
        ul.dropdown-menu#agency_filter_select
          | {{#all_agencies}}
          <agencyFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{name}}' />
          | {{/all_agencies}}
  .row.labels
    .col-md-2(class-active="@this.is_active('area')")
      | {{ t.area }}
    .col-md-2(class-active="@this.is_active('complaint_basis')")
      | {{ t.complaint_basis }}
    .col-md-2(class-active="@this.is_active('assignee')")
      | {{ t.assignee }}
  .row(style = "margin-bottom:12px;")
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_area }}
          span.caret
        ul.dropdown-menu#mandate_filter_select
          | {{#all_mandates}}
          <mandateFilterSelect id='{{id}}' name='{{name}}' filter_criteria='{{filter_criteria}}' />
          | {{/all_mandates}}
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_basis }}
          span.caret
        ul.dropdown-menu
          li.dropdown-header 
            | {{ t.good_governance }}
          | {{#all_good_governance_complaint_bases}}
          <goodGovernanceComplaintBasisFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{name}}'/>
          | {{/all_good_governance_complaint_bases}}
          li.dropdown-header 
            | {{ t.human_rights }}
          | {{#all_human_rights_complaint_bases}}
          <humanRightsComplaintBasisFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{name}}'/>
          | {{/all_human_rights_complaint_bases}}
          li.dropdown-header 
            | {{ t.special_investigations_unit }}
          | {{#all_special_investigations_unit_complaint_bases}}
          <specialInvestigationsUnitComplaintBasisFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{name}}'/>
          | {{/all_special_investigations_unit_complaint_bases}}
    .col-md-2
      .btn-group.select
        button.btn.btn-default.dropdown-toggle#assignee_select(type='button', 'data-toggle'='dropdown')
          span.filter-option.pull-left 
            | {{ t.select_assignee }}
          span.caret
        ul.dropdown-menu#assignee_filter_select
          | {{#all_staff}}
          <assigneeFilterSelect filter_criteria='{{filter_criteria}}' id='{{id}}' name='{{first_last_name}}'/>
          | {{/all_staff}}

style.
  .active:after { 
    content: "*";
    color: #f55310;
    font-size: 1.6em;
    line-height: 12px;
  }

script.
  import GoodGovernanceComplaintBasisFilterSelect from './good_governance_complaint_basis_filter_select'
  import HumanRightsComplaintBasisFilterSelect from './human_rights_complaint_basis_filter_select'
  import SpecialInvestigationsUnitComplaintBasisFilterSelect from './special_investigations_unit_complaint_basis_filter_select'
  import AgencyFilterSelect from './agency_filter_select'
  import MandateFilterSelect from './mandate_filter_select'
  import AssigneeFilterSelect from './assignee_filter_select'
  import StatusFilterSelect from './status_filter_select'
  import translations from './translations.js'

  export default Ractive.extend({
    template : $TEMPLATE,
    css: $CSS,
    components : {
      goodGovernanceComplaintBasisFilterSelect : GoodGovernanceComplaintBasisFilterSelect,
      humanRightsComplaintBasisFilterSelect : HumanRightsComplaintBasisFilterSelect,
      specialInvestigationsUnitComplaintBasisFilterSelect : SpecialInvestigationsUnitComplaintBasisFilterSelect,
      agencyFilterSelect : AgencyFilterSelect,
      mandateFilterSelect : MandateFilterSelect,
      assigneeFilterSelect : AssigneeFilterSelect,
      statusFilterSelect : StatusFilterSelect
    },
    data : function(){ return {
      t : translations.t('filter_controls')
    }},
    observe: {
      //'filter_criteria.case_reference filter_criteria.complainant filter_criteria.from filter_criteria.to filter_criteria.village filter_criteria.phone': {
        //handler(value, old, path, idx){
          //if(!_.isUndefined(old)){ //this prevents a json reload when the page is first loaded
            //this.parent.load();
          //}
        //}
      //},
      //'filter_criteria.selected_special_investigations_unit_complaint_basis_ids filter_criteria.selected_human_rights_complaint_basis_ids filter_criteria.selected_good_governance_complaint_basis_ids' : {
        //handler(value, old, path, idx){
          //if(!_.isUndefined(old)){
            //this.parent.load();
          //}
        //}
      //},
      //'filter_criteria.selected_assignee_id': {
        //handler(value, old, path, idx){
          //if(!_.isUndefined(old)){
            //this.parent.load();
          //}
        //}
      //},
      //'filter_criteria.selected_status_ids filter_criteria.selected_mandate_ids filter_criteria.selected_agency_ids': {
        //handler(value, old, path, idx){
          //if(!_.isUndefined(old)){
            //this.parent.load();
          //}
        //}
      //},
      'filter_criteria': {
        handler(value, old, path, idx){
          if(!_.isUndefined(old)){
            this.parent.load();
          }
        }
      },
    },
    clear_filter() {
      complaints_page_data().filter_criteria.case_reference = null
      this.set('filter_criteria',$.extend(true,{},complaints_page_data().filter_criteria));
      window.history.pushState({foo: "bar"},"unused title string",window.location.origin + window.location.pathname);
      complaints.load();
      //return this.set_filter_from_query_string();
    },
    set_filter_from_query_string() {
      const search_string = (_.isEmpty( window.location.search) || _.isNull( window.location.search)) ? '' : window.location.search.split("=")[1];
      const filter_criteria = _.extend(source_filter_criteria,{case_reference : search_string});
      return this.set('filter_criteria',filter_criteria);
    },
    is_active(attr){
      if(attr == 'status'){
        return !_.isEmpty(this.get('filter_criteria.selected_status_ids'))
      }else if(attr == 'assignee'){
        return _.isNumber(this.get('filter_criteria.selected_assignee_id'))
      }else if(attr == 'case_reference'){
        return !_.isEmpty(this.get('filter_criteria.case_reference'))
      }else if(attr == 'complainant'){
        return !_.isEmpty(this.get('filter_criteria.complainant'))
      }else if(attr == 'village'){
        return !_.isEmpty(this.get('filter_criteria.village'))
      }else if(attr == 'phone'){
        return !_.isEmpty(this.get('filter_criteria.phone'))
      }else if(attr == 'from'){
        return !_.isEmpty(this.get('filter_criteria.from'))
      }else if(attr == 'to'){
        return !_.isEmpty(this.get('filter_criteria.to'))
      }else if(attr == 'agency'){
        return !_.isEmpty(this.get('filter_criteria.selecte_agency_ids'))
      }else if(attr == 'agency'){
        return !_.isEmpty(this.get('filter_criteria.basis_ids'))
      }else if(attr == 'agency'){
        gg = !_.isEmpty(this.get('filter_criteria.selected_good_governance_complaint_basis_ids'))
        hr = !_.isEmpty(this.get('filter_criteria.selected_human_rights_complaint_basis_ids'))
        siu = !_.isEmpty(this.get('filter_criteria.selected_special_investigations_unit_complaint_basis_ids'))
        return gg && hr && siu
      }
    }
  });
